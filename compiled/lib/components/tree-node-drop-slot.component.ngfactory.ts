/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../lib/components/tree-node-drop-slot.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '../directives/tree-drop.directive.ngfactory';
import * as import10 from '@angular/core/src/linker/element_ref';
import * as import11 from '../../../lib/models/tree-dragged-element.model';
import * as import12 from '../../../lib/directives/tree-drop.directive';
export class Wrapper_TreeNodeDropSlot {
  /*private*/ _eventHandler:Function;
  context:import0.TreeNodeDropSlot;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor() {
    this._changed = false;
    this.context = new import0.TreeNodeDropSlot();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_node(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.node = currValue;
      this._expr_0 = currValue;
    }
  }
  check_dropIndex(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.dropIndex = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_TreeNodeDropSlot_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_TreeNodeDropSlot_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.TreeNodeDropSlot>;
  _TreeNodeDropSlot_0_3:Wrapper_TreeNodeDropSlot;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TreeNodeDropSlot_Host0,renderType_TreeNodeDropSlot_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'TreeNodeDropSlot',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_TreeNodeDropSlot0(this.viewUtils,this,0,this._el_0);
    this._TreeNodeDropSlot_0_3 = new Wrapper_TreeNodeDropSlot();
    this.compView_0.create(this._TreeNodeDropSlot_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._TreeNodeDropSlot_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.TreeNodeDropSlot) && (0 === requestNodeIndex))) { return this._TreeNodeDropSlot_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._TreeNodeDropSlot_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const TreeNodeDropSlotNgFactory:import8.ComponentFactory<import0.TreeNodeDropSlot> = new import8.ComponentFactory<import0.TreeNodeDropSlot>('TreeNodeDropSlot',View_TreeNodeDropSlot_Host0,import0.TreeNodeDropSlot);
const styles_TreeNodeDropSlot:any[] = [
  '.node-drop-slot { display: block; height: 2px; width: 100%}',
  '.node-drop-slot.is-dragging-over { background: #ddffee; height: 20px; border: 2px dotted #888; }'
]
;
var renderType_TreeNodeDropSlot:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_TreeNodeDropSlot,{});
export class View_TreeNodeDropSlot0 extends import2.AppView<import0.TreeNodeDropSlot> {
  _text_0:any;
  _el_1:any;
  _TreeDropDirective_1_3:import9.Wrapper_TreeDropDirective;
  _text_2:any;
  _text_3:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TreeNodeDropSlot0,renderType_TreeNodeDropSlot,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','node-drop-slot'),(null as any));
    this._TreeDropDirective_1_3 = new import9.Wrapper_TreeDropDirective(new import10.ElementRef(this._el_1),this.renderer,this.parentView.injectorGet(import11.TreeDraggedElement,this.parentIndex));
    this._text_2 = this.renderer.createText(this._el_1,'\n    ',(null as any));
    this._text_3 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_1,new import3.InlineArray8(8,'treeDrop',(null as any),'dragover',(null as any),'dragleave',(null as any),'drop',(null as any)),this.eventHandler(this.handleEvent_1));
    this._TreeDropDirective_1_3.subscribe(this,this.eventHandler(this.handleEvent_1),true);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._text_3
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import12.TreeDropDirective) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 2)))) { return this._TreeDropDirective_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this.context.allowDrop.bind(this.context);
    this._TreeDropDirective_1_3.check_treeAllowDrop(currVal_1_0_0,throwOnChange,false);
    this._TreeDropDirective_1_3.ngDoCheck(this,this._el_1,throwOnChange);
  }
  destroyInternal():void {
    this._TreeDropDirective_1_3.ngOnDestroy();
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._TreeDropDirective_1_3.handleEvent(eventName,$event) && result);
    if ((eventName == 'treeDrop')) {
      const pd_sub_0:any = ((<any>this.context.onDrop($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}